/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package managerportal;

import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.PlainDocument;

/**
 *
 * @author Mohit Arora
 */
public class menuControlPanel extends javax.swing.JFrame {

    private final workstation mainObject;
    private final Connection conn;
    private Statement s;
    private DefaultTableModel model;
    /**
     * Creates new form adminControlPanel
     * @param mainObject
     * @param conn
     * @throws java.sql.SQLException
     */
    public menuControlPanel(workstation mainObject,Connection conn) throws SQLException {
        this.conn = conn;
        this.mainObject = mainObject;
        initComponents();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("logo.png")));
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        back.requestFocus();
        this.setVisible(true);
        addRows();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        back = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        newrecord = new javax.swing.JButton();
        update = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MENU CONTROL PANEL");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ITEM_ID", "ITEM_NAME", "CATEGORY", "MRP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTable1FocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.setEnabled(false);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        newrecord.setText("New");
        newrecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newrecordActionPerformed(evt);
            }
        });

        update.setText("Update");
        update.setEnabled(false);
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(newrecord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newrecord)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(update)
                        .addGap(191, 191, 191)
                        .addComponent(back))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addRows() throws SQLException{
        s=conn.createStatement();
        model=(DefaultTableModel)jTable1.getModel();
        ResultSet r=s.executeQuery("select * from menu order by item_id");
        while(r.next())
        {
            model.addRow(new Object[]{r.getInt("item_id"),r.getString("item_name"),r.getString("category"),r.getInt("mrp")});
        }
        
    }
    
    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        this.dispose();
        mainObject.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_backActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int selected_item_id = (int) jTable1.getValueAt(jTable1.getSelectedRow(), 0);
        try {
            s.execute("delete from menu where item_id = "+selected_item_id);
            model.removeRow(jTable1.getSelectedRow());
        } catch (SQLException ex) {
            Logger.getLogger(menuControlPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void jTable1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusGained
        // TODO add your handling code here:
        delete.setEnabled(true);
        update.setEnabled(true);
    }//GEN-LAST:event_jTable1FocusGained

    private void newrecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newrecordActionPerformed
        // TODO add your handling code here:
        
      JTextField itemIdField = new JTextField();
      PlainDocument itemiddoc = (PlainDocument) itemIdField.getDocument();
      itemiddoc.setDocumentFilter(new MyIntFilter());
      JTextField itemNameField = new JTextField();
      JTextField categoryField = new JTextField();
      JTextField mrpField = new JTextField();
      PlainDocument mrpdoc = (PlainDocument) mrpField.getDocument();
      mrpdoc.setDocumentFilter(new MyIntFilter());
      Object[] message = {
        "Item ID:", itemIdField,
        "Item Name:", itemNameField,
        "Category:", categoryField,
        "MRP:", mrpField
      };
      int option = JOptionPane.showConfirmDialog(null, message, "Add new menu item", JOptionPane.OK_CANCEL_OPTION);
      if (option == JOptionPane.OK_OPTION) {
          if ("".equals(itemIdField.getText()) || "".equals(itemNameField.getText()) || "".equals(categoryField.getText()) || "".equals(mrpField.getText())){
              JOptionPane.showMessageDialog(back,
    "All Fields are mandatory",
    "Error",
    JOptionPane.ERROR_MESSAGE);
          }
          else{
               try{
                   s.execute("insert into menu values ("+itemIdField.getText()+",'"+itemNameField.getText()+"','"+categoryField.getText()+"',"+mrpField.getText()+")");
                   model.setRowCount(0);
                   addRows();
               }catch (SQLException ex){
                   Logger.getLogger(menuControlPanel.class.getName()).log(Level.SEVERE, null, ex);
               }
          }
      
      }
    }//GEN-LAST:event_newrecordActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        
        JTextField itemIdField = new JTextField();
      PlainDocument itemiddoc = (PlainDocument) itemIdField.getDocument();
      itemiddoc.setDocumentFilter(new MyIntFilter());
      JTextField itemNameField = new JTextField();
      JTextField categoryField = new JTextField();
      JTextField mrpField = new JTextField();
      PlainDocument mrpdoc = (PlainDocument) mrpField.getDocument();
      mrpdoc.setDocumentFilter(new MyIntFilter());
      Object[] message = {
        "Item ID:", itemIdField,
        "Item Name:", itemNameField,
        "Category:", categoryField,
        "MRP:", mrpField
      };
      Integer old_itemid = (int) jTable1.getValueAt(jTable1.getSelectedRow(), 0);
      itemIdField.setText(old_itemid.toString());
      itemNameField.setText((String) jTable1.getValueAt(jTable1.getSelectedRow(), 1));
      categoryField.setText((String) jTable1.getValueAt(jTable1.getSelectedRow(), 2));
      Integer old_mrp = (int) jTable1.getValueAt(jTable1.getSelectedRow(), 3);
      mrpField.setText(old_mrp.toString());
      int option = JOptionPane.showConfirmDialog(null, message, "Update menu details", JOptionPane.OK_CANCEL_OPTION);
      if (option == JOptionPane.OK_OPTION) {
          if ("".equals(itemIdField.getText()) || "".equals(itemNameField.getText()) || "".equals(categoryField.getText()) || "".equals(mrpField.getText())){
              JOptionPane.showMessageDialog(back,
    "All Fields are mandatory",
    "Error",
    JOptionPane.ERROR_MESSAGE);
          }
          else{
               try{
                   s.execute("update menu set item_id = "+itemIdField.getText()+", item_name = '"+itemNameField.getText()+"', category = '"+categoryField.getText()+"', mrp = "+mrpField.getText()+" where item_id = "+old_itemid);
                   model.setRowCount(0);
                   addRows();
               }catch (SQLException ex){
                   Logger.getLogger(menuControlPanel.class.getName()).log(Level.SEVERE, null, ex);
               }
          }
      
      }
    }//GEN-LAST:event_updateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menuControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menuControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menuControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menuControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
        //    public void run() {
        //        new menuControlPanel(new workstation()).setVisible(true);
        //    }
        //});
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
        //    public void run() {
        //        new menuControlPanel(new workstation()).setVisible(true);
        //    }
        //});
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
        //    public void run() {
        //        new menuControlPanel(new workstation()).setVisible(true);
        //    }
        //});
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
        //    public void run() {
        //        new menuControlPanel(new workstation()).setVisible(true);
        //    }
        //});
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
        //    public void run() {
        //        new menuControlPanel(new workstation()).setVisible(true);
        //    }
        //});
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
        //    public void run() {
        //        new menuControlPanel(new workstation()).setVisible(true);
        //    }
        //});
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
        //    public void run() {
        //        new menuControlPanel(new workstation()).setVisible(true);
        //    }
        //});
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
        //    public void run() {
        //        new menuControlPanel(new workstation()).setVisible(true);
        //    }
        //});
    }
    
    @Override
    public void setDefaultCloseOperation(int operation) {
        super.setDefaultCloseOperation(menuControlPanel.DO_NOTHING_ON_CLOSE);
        //To change body of generated methods, choose Tools | Templates.
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton delete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton newrecord;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}

